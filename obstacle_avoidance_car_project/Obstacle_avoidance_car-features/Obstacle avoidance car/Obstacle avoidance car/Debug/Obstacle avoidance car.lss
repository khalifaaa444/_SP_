
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00001770  00001804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080009e  0080009e  00001842  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001842  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003674  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff0  00000000  00000000  00005234  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f19  00000000  00000000  00006224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00008140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e53  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  00009573  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000a9b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 a4 03 	jmp	0x748	; 0x748 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 07 	call	0xf38	; 0xf38 <main>
      8a:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;           /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 85 07 	call	0xf0a	; 0xf0a <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 29 09 	call	0x1252	; 0x1252 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 0f 04 	call	0x81e	; 0x81e <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 c9 03 	call	0x792	; 0x792 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_init>
	
	TMR0_delayms(50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
      fe:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     102:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     106:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 29 0a 	call	0x1452	; 0x1452 <TMR2_getovs>
     112:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     116:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     11a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     11e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 13 0a 	call	0x1426	; 0x1426 <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	39 c0       	rjmp	.+114    	; 0x19a <APP_setentry+0xae>
	{
 		LCD_goto(0 , 1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 cf 03 	call	0x79e	; 0x79e <Is_pressed>
 		TMR0_delayms(100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 cf 03 	call	0x79e	; 0x79e <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	41 f4       	brne	.+16     	; 0x184 <APP_setentry+0x98>
 			{
				LCD_goto(1 , 1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>
     182:	0a c0       	rjmp	.+20     	; 0x198 <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	41 f4       	brne	.+16     	; 0x198 <APP_setentry+0xac>
	 		{
 				LCD_goto(1 , 1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     190:	8b e7       	ldi	r24, 0x7B	; 123
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     198:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     19a:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     19e:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     1a2:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     1a6:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     1aa:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     1ae:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     1b2:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     1b6:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <APP_setentry+0xda>
     1c4:	b1 cf       	rjmp	.-158    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1c6:	0e 94 1e 0a 	call	0x143c	; 0x143c <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1ca:	ce 01       	movw	r24, r28
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	0e 94 4d 04 	call	0x89a	; 0x89a <KEYPAD_read>
 	} while (u8_a_pressednum != START_BTN);
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	81 33       	cpi	r24, 0x31	; 49
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
	 TMR0_delayms(20);
     1de:	64 e1       	ldi	r22, 0x14	; 20
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
	 
	 LCD_goto(0 ,2 );
     1ea:	62 e0       	ldi	r22, 0x02	; 2
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
	 LCD_writestr("Waiting");
     1f2:	8a e8       	ldi	r24, 0x8A	; 138
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>
	 
	 TMR0_delayms(2000); /** WAIT 2 SECONDS **/
     1fa:	60 ed       	ldi	r22, 0xD0	; 208
     1fc:	77 e0       	ldi	r23, 0x07	; 7
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
	 TMR0_delayms(20);
     20c:	64 e1       	ldi	r22, 0x14	; 20
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
	 
}
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <APP_start>:

void APP_start()
{	
	u32_g_tick = 0 , u32_g_delay = 0 ; /** VARIABLES TO HANDLE THE DELAY **/
     222:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     226:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     22a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     22e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
     232:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <u32_g_delay>
     236:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <u32_g_delay+0x1>
     23a:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <u32_g_delay+0x2>
     23e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     242:	0e 94 8b 07 	call	0xf16	; 0xf16 <US_sendtrigger>
		
	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     246:	88 e8       	ldi	r24, 0x88	; 136
     248:	93 e1       	ldi	r25, 0x13	; 19
     24a:	0e 94 29 0a 	call	0x1452	; 0x1452 <TMR2_getovs>
     24e:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     252:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     256:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     25a:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     25e:	82 c0       	rjmp	.+260    	; 0x364 <APP_start+0x142>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
     260:	af e9       	ldi	r26, 0x9F	; 159
     262:	b6 e4       	ldi	r27, 0x46	; 70
     264:	0e 94 85 0b 	call	0x170a	; 0x170a <__umulhisi3>
     268:	88 0f       	add	r24, r24
     26a:	89 2f       	mov	r24, r25
     26c:	88 1f       	adc	r24, r24
     26e:	99 0b       	sbc	r25, r25
     270:	91 95       	neg	r25
     272:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_g_distance>
			
			TMR2_start() ; /** START TIMER 2 **/
     276:	0e 94 13 0a 	call	0x1426	; 0x1426 <TMR2_start>
		
			while (u32_g_tick < u32_g_delay)
     27a:	2d c0       	rjmp	.+90     	; 0x2d6 <APP_start+0xb4>
			{
				/** MOVE WITH 50% SPEED FOR 5 MIN **/
				MOTOR_turnon(MOTOR1_ID);
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
				LCD_goto(0,1) ;
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
				TMR0_delaymicros(SPEED_50_ON_TIME);
     29c:	60 ee       	ldi	r22, 0xE0	; 224
     29e:	74 ec       	ldi	r23, 0xC4	; 196
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 8c 09 	call	0x1318	; 0x1318 <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
				LCD_writestr("Distance :");
     2c0:	82 e9       	ldi	r24, 0x92	; 146
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>
				LCD_writeint(u8_g_distance);
     2c8:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <LCD_writeint>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
			
			TMR2_start() ; /** START TIMER 2 **/
		
			while (u32_g_tick < u32_g_delay)
     2d6:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     2da:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     2de:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     2e2:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     2e6:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     2ea:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     2ee:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     2f2:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     2f6:	48 17       	cp	r20, r24
     2f8:	59 07       	cpc	r21, r25
     2fa:	6a 07       	cpc	r22, r26
     2fc:	7b 07       	cpc	r23, r27
     2fe:	08 f4       	brcc	.+2      	; 0x302 <APP_start+0xe0>
     300:	bd cf       	rjmp	.-134    	; 0x27c <APP_start+0x5a>
				MOTOR_turnoff(MOTOR4_ID);
				LCD_writestr("Distance :");
				LCD_writeint(u8_g_distance);
			}
					
			TMR2_stop() ; /** STOP TIMER2 AFTER THE 5 SECONDS **/
     302:	0e 94 1e 0a 	call	0x143c	; 0x143c <TMR2_stop>
					
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			LCD_goto(0,1) ;
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     326:	60 e5       	ldi	r22, 0x50	; 80
     328:	70 e5       	ldi	r23, 0x50	; 80
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 8c 09 	call	0x1318	; 0x1318 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			LCD_writestr("Distance :");
     34a:	82 e9       	ldi	r24, 0x92	; 146
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>
			LCD_writeint(u8_g_distance);
     352:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <LCD_writeint>
			
			US_sendtrigger(); /** SEND TRIGGER **/
     360:	0e 94 8b 07 	call	0xf16	; 0xf16 <US_sendtrigger>
	
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     364:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <u16_g_time>
     368:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     36c:	20 3b       	cpi	r18, 0xB0	; 176
     36e:	80 e8       	ldi	r24, 0x80	; 128
     370:	38 07       	cpc	r19, r24
     372:	08 f0       	brcs	.+2      	; 0x376 <APP_start+0x154>
     374:	75 cf       	rjmp	.-278    	; 0x260 <APP_start+0x3e>
     376:	2f c0       	rjmp	.+94     	; 0x3d6 <APP_start+0x1b4>
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
	{
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     38a:	83 e0       	ldi	r24, 0x03	; 3
     38c:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
		LCD_goto(0,1) ;
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
		TMR0_delaymicros(SPEED_30_ON_TIME);
     398:	60 e5       	ldi	r22, 0x50	; 80
     39a:	70 e5       	ldi	r23, 0x50	; 80
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 8c 09 	call	0x1318	; 0x1318 <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
		LCD_writestr("Distance :");
     3bc:	82 e9       	ldi	r24, 0x92	; 146
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>
		LCD_writeint(u8_g_distance);
     3c4:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <LCD_writeint>
		US_sendtrigger(); /** SEND TRIGGER **/
     3d2:	0e 94 8b 07 	call	0xf16	; 0xf16 <US_sendtrigger>
			LCD_writeint(u8_g_distance);
			
			US_sendtrigger(); /** SEND TRIGGER **/
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
     3d6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     3da:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     3de:	80 36       	cpi	r24, 0x60	; 96
     3e0:	96 43       	sbci	r25, 0x36	; 54
     3e2:	50 f6       	brcc	.-108    	; 0x378 <APP_start+0x156>
		LCD_writestr("Distance :");
		LCD_writeint(u8_g_distance);
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	u32_g_tick = 0 ;
     3e4:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     3e8:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     3ec:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     3f0:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     3f4:	84 ef       	ldi	r24, 0xF4	; 244
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 29 0a 	call	0x1452	; 0x1452 <TMR2_getovs>
     3fc:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     400:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     404:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     408:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20) /** DISTANCE FROM 20 TO 30 CM **/
     40c:	65 c0       	rjmp	.+202    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
		
		TMR2_start() ; /** START TIMER 2 **/
     426:	0e 94 13 0a 	call	0x1426	; 0x1426 <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     42a:	06 c0       	rjmp	.+12     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		{
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
		MOTOR_turnoff(MOTOR2_ID);
		MOTOR_turnoff(MOTOR3_ID);
		MOTOR_turnoff(MOTOR4_ID);
		
		TMR2_start() ; /** START TIMER 2 **/
		while (u32_g_tick < u32_g_delay)
     438:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     43c:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     440:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     444:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     448:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     44c:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     450:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     454:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     458:	48 17       	cp	r20, r24
     45a:	59 07       	cpc	r21, r25
     45c:	6a 07       	cpc	r22, r26
     45e:	7b 07       	cpc	r23, r27
     460:	28 f3       	brcs	.-54     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
     462:	0e 94 1e 0a 	call	0x143c	; 0x143c <TMR2_stop>
			
		while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** WHEN DISTANCE BECOME MORE THAN 30 CM **/
     466:	2f c0       	rjmp	.+94     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
		{
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			LCD_goto(0,1) ;
     480:	61 e0       	ldi	r22, 0x01	; 1
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     488:	60 e5       	ldi	r22, 0x50	; 80
     48a:	70 e5       	ldi	r23, 0x50	; 80
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 8c 09 	call	0x1318	; 0x1318 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			LCD_writestr("Distance :");
     4ac:	82 e9       	ldi	r24, 0x92	; 146
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>
			LCD_writeint(u8_g_distance);
     4b4:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <LCD_writeint>
			US_sendtrigger(); /** SEND TRIGGER **/
     4c2:	0e 94 8b 07 	call	0xf16	; 0xf16 <US_sendtrigger>
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
			
		while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** WHEN DISTANCE BECOME MORE THAN 30 CM **/
     4c6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     4ca:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     4ce:	80 36       	cpi	r24, 0x60	; 96
     4d0:	96 43       	sbci	r25, 0x36	; 54
     4d2:	50 f6       	brcc	.-108    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
			MOTOR_turnoff(MOTOR4_ID);
			LCD_writestr("Distance :");
			LCD_writeint(u8_g_distance);
			US_sendtrigger(); /** SEND TRIGGER **/
		}
		US_sendtrigger(); /** SEND TRIGGER **/
     4d4:	0e 94 8b 07 	call	0xf16	; 0xf16 <US_sendtrigger>
	}
	
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20) /** DISTANCE FROM 20 TO 30 CM **/
     4d8:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     4dc:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     4e0:	80 34       	cpi	r24, 0x40	; 64
     4e2:	94 42       	sbci	r25, 0x24	; 36
     4e4:	08 f0       	brcs	.+2      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     4e6:	93 cf       	rjmp	.-218    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     4e8:	d1 c0       	rjmp	.+418    	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
	{
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 ff 06 	call	0xdfe	; 0xdfe <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR3_ID);
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR4_ID);
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	0e 94 ff 06 	call	0xdfe	; 0xdfe <MOTOR_rotateanticlkdir>
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     502:	2f c0       	rjmp	.+94     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
		{
			/** GO BACKWARDS WITH 30% SPEED **/
			MOTOR_turnon(MOTOR1_ID);
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			LCD_goto(0,1) ;
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     524:	60 e5       	ldi	r22, 0x50	; 80
     526:	70 e5       	ldi	r23, 0x50	; 80
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 8c 09 	call	0x1318	; 0x1318 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			LCD_writestr("Distance :");
     548:	82 e9       	ldi	r24, 0x92	; 146
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>
			LCD_writeint(u8_g_distance);
     550:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <LCD_writeint>
			US_sendtrigger(); /** SEND TRIGGER **/
     55e:	0e 94 8b 07 	call	0xf16	; 0xf16 <US_sendtrigger>
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
		MOTOR_rotateanticlkdir(MOTOR2_ID);
		MOTOR_rotateanticlkdir(MOTOR3_ID);
		MOTOR_rotateanticlkdir(MOTOR4_ID);
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     562:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     566:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     56a:	80 31       	cpi	r24, 0x10	; 16
     56c:	96 42       	sbci	r25, 0x26	; 38
     56e:	50 f2       	brcs	.-108    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
			LCD_writestr("Distance :");
			LCD_writeint(u8_g_distance);
			US_sendtrigger(); /** SEND TRIGGER **/
		}
		
		u32_g_tick = 0 ;
     570:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     574:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     578:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     57c:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
		u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     580:	84 ef       	ldi	r24, 0xF4	; 244
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 29 0a 	call	0x1452	; 0x1452 <TMR2_getovs>
     588:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     58c:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     590:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     594:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
		TMR2_start() ; /** START TIMER 2 **/
     598:	0e 94 13 0a 	call	0x1426	; 0x1426 <TMR2_start>
		
		MOTOR_rotateclkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR2_ID);
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR3_ID);
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR4_ID);
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MOTOR_rotateclkdir>
		
		while ((u16_g_time/DISTANCE_DIV) > DISTANCE_20)
     5b4:	63 c0       	rjmp	.+198    	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
		{
			/** STOP THEN ROTATE **/
			MOTOR_turnoff(MOTOR1_ID);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
			
			while (u32_g_tick < u32_g_delay)
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
			{
				/** ROTATION **/
				MOTOR_turnon(MOTOR3_ID);
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
			MOTOR_turnoff(MOTOR1_ID);
			MOTOR_turnoff(MOTOR2_ID);
			MOTOR_turnoff(MOTOR3_ID);
			MOTOR_turnoff(MOTOR4_ID);
			
			while (u32_g_tick < u32_g_delay)
     5dc:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     5e0:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     5e4:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     5e8:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     5ec:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     5f0:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     5f4:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     5f8:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     5fc:	48 17       	cp	r20, r24
     5fe:	59 07       	cpc	r21, r25
     600:	6a 07       	cpc	r22, r26
     602:	7b 07       	cpc	r23, r27
     604:	28 f3       	brcs	.-54     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
			{
				/** ROTATION **/
				MOTOR_turnon(MOTOR3_ID);
				MOTOR_turnon(MOTOR4_ID);
			}
			US_sendtrigger(); /** SEND TRIGGER **/
     606:	0e 94 8b 07 	call	0xf16	; 0xf16 <US_sendtrigger>
			TMR2_stop() ; /** START TIMER 2 **/
     60a:	0e 94 1e 0a 	call	0x143c	; 0x143c <TMR2_stop>
			
			while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30)
     60e:	2f c0       	rjmp	.+94     	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
			{
				MOTOR_turnon(MOTOR1_ID);
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	0e 94 5f 07 	call	0xebe	; 0xebe <MOTOR_turnon>
				LCD_goto(0,1) ;
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_goto>
				TMR0_delaymicros(SPEED_30_ON_TIME);
     630:	60 e5       	ldi	r22, 0x50	; 80
     632:	70 e5       	ldi	r23, 0x50	; 80
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 8c 09 	call	0x1318	; 0x1318 <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	0e 94 39 07 	call	0xe72	; 0xe72 <MOTOR_turnoff>
				LCD_writestr("Distance :");
     654:	82 e9       	ldi	r24, 0x92	; 146
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_writestr>
				LCD_writeint(u8_g_distance);
     65c:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <LCD_writeint>
				US_sendtrigger(); /** SEND TRIGGER **/
     66a:	0e 94 8b 07 	call	0xf16	; 0xf16 <US_sendtrigger>
				MOTOR_turnon(MOTOR4_ID);
			}
			US_sendtrigger(); /** SEND TRIGGER **/
			TMR2_stop() ; /** START TIMER 2 **/
			
			while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30)
     66e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     672:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     676:	80 36       	cpi	r24, 0x60	; 96
     678:	96 43       	sbci	r25, 0x36	; 54
     67a:	50 f6       	brcc	.-108    	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
		MOTOR_rotateclkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
		MOTOR_rotateclkdir(MOTOR2_ID);
		MOTOR_rotateclkdir(MOTOR3_ID);
		MOTOR_rotateclkdir(MOTOR4_ID);
		
		while ((u16_g_time/DISTANCE_DIV) > DISTANCE_20)
     67c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     680:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     684:	80 31       	cpi	r24, 0x10	; 16
     686:	96 42       	sbci	r25, 0x26	; 38
     688:	08 f0       	brcs	.+2      	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
     68a:	95 cf       	rjmp	.-214    	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
			US_sendtrigger(); /** SEND TRIGGER **/
		}
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
     68c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     690:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     694:	80 34       	cpi	r24, 0x40	; 64
     696:	94 42       	sbci	r25, 0x24	; 36
     698:	08 f4       	brcc	.+2      	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
     69a:	27 cf       	rjmp	.-434    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
				US_sendtrigger(); /** SEND TRIGGER **/
			}
		}
		
	}
}
     69c:	08 95       	ret

0000069e <__vector_1>:


/** EXTI0 **/
ISR(INT0_vect)
{
     69e:	1f 92       	push	r1
     6a0:	0f 92       	push	r0
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	0f 92       	push	r0
     6a6:	11 24       	eor	r1, r1
     6a8:	2f 93       	push	r18
     6aa:	3f 93       	push	r19
     6ac:	4f 93       	push	r20
     6ae:	5f 93       	push	r21
     6b0:	6f 93       	push	r22
     6b2:	7f 93       	push	r23
     6b4:	8f 93       	push	r24
     6b6:	9f 93       	push	r25
     6b8:	af 93       	push	r26
     6ba:	bf 93       	push	r27
     6bc:	ef 93       	push	r30
     6be:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     6c0:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <u8_echoedge>
     6c4:	8f 5f       	subi	r24, 0xFF	; 255
     6c6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <u8_echoedge>
	
	if(u8_echoedge == 1) /** FIRST CHANGE (RISING EDGE) **/
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	19 f4       	brne	.+6      	; 0x6d4 <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     6ce:	0e 94 06 04 	call	0x80c	; 0x80c <ICU_start>
     6d2:	1f c0       	rjmp	.+62     	; 0x712 <__vector_1+0x74>
	}
	
	else if(u8_echoedge == 2) /** SECOND CHANGE (FALLING EDGE) **/
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	e9 f4       	brne	.+58     	; 0x712 <__vector_1+0x74>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     6d8:	0e 94 0c 04 	call	0x818	; 0x818 <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     6dc:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <ICU_getvalue>
     6e0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <u16_g_time+0x1>
     6e4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <u16_g_time>
		
		ICU_setcounterval(0); /** START COUNTING FROM ZERO **/
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 09 04 	call	0x812	; 0x812 <ICU_setcounterval>
				
		u8_echoedge = 0 ; /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     6f0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <u8_echoedge>
		
		u8_g_distance = (u16_g_time/464) ; /** CALCULATE THE DISTANCE **/
     6f4:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <u16_g_time>
     6f8:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     6fc:	af e9       	ldi	r26, 0x9F	; 159
     6fe:	b6 e4       	ldi	r27, 0x46	; 70
     700:	0e 94 85 0b 	call	0x170a	; 0x170a <__umulhisi3>
     704:	88 0f       	add	r24, r24
     706:	89 2f       	mov	r24, r25
     708:	88 1f       	adc	r24, r24
     70a:	99 0b       	sbc	r25, r25
     70c:	91 95       	neg	r25
     70e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_g_distance>
	}
}
     712:	ff 91       	pop	r31
     714:	ef 91       	pop	r30
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	18 95       	reti

00000734 <__vector_9>:

/** TIMER 1 OVERFLOW **/
ISR(TIMER1_OVF_vect)
{
     734:	1f 92       	push	r1
     736:	0f 92       	push	r0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
	/** DO NOTHING **/
}
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63
     742:	0f 90       	pop	r0
     744:	1f 90       	pop	r1
     746:	18 95       	reti

00000748 <__vector_5>:

/** TIMER 0 OVERFLOW **/
ISR(TIMER2_OVF_vect)
{
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS  **/
     75a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
     75e:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <__data_end+0x1>
     762:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <__data_end+0x2>
     766:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <__data_end+0x3>
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	a1 1d       	adc	r26, r1
     76e:	b1 1d       	adc	r27, r1
     770:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
     774:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__data_end+0x1>
     778:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <__data_end+0x2>
     77c:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <__data_end+0x3>
}
     780:	bf 91       	pop	r27
     782:	af 91       	pop	r26
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(void)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(BUTTON1_PORT , BUTTON1_PIN , DIO_PIN_INPUT);
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
     79c:	08 95       	ret

0000079e <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
en_a_button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	1f 92       	push	r1
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	8a 01       	movw	r16, r20
	en_a_button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
     7ae:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
     7b0:	ae 01       	movw	r20, r28
     7b2:	4f 5f       	subi	r20, 0xFF	; 255
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_readpin>
	
	if (!pin_status) 
     7ba:	81 11       	cpse	r24, r1
     7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	f8 01       	movw	r30, r16
     7c2:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	f8 01       	movw	r30, r16
     7cc:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     7ce:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
     7d0:	0f 90       	pop	r0
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     7dc:	0e 94 c0 09 	call	0x1380	; 0x1380 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     7e0:	0e 94 1d 09 	call	0x123a	; 0x123a <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 95       	ret

000007e8 <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <ICU_getvalue+0x6>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     7f2:	1a 82       	std	Y+2, r1	; 0x02
     7f4:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     7f6:	ce 01       	movw	r24, r28
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     80c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <TMR1_start>
     810:	08 95       	ret

00000812 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     812:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <TMR1_setcounterval>
     816:	08 95       	ret

00000818 <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     818:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <TMR1_stop>
     81c:	08 95       	ret

0000081e <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     81e:	41 e0       	ldi	r20, 0x01	; 1
     820:	65 e0       	ldi	r22, 0x05	; 5
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	66 e0       	ldi	r22, 0x06	; 6
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	67 e0       	ldi	r22, 0x07	; 7
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>

	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	64 e0       	ldi	r22, 0x04	; 4
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);


    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	65 e0       	ldi	r22, 0x05	; 5
     85e:	83 e0       	ldi	r24, 0x03	; 3
     860:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	66 e0       	ldi	r22, 0x06	; 6
     868:	83 e0       	ldi	r24, 0x03	; 3
     86a:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	67 e0       	ldi	r22, 0x07	; 7
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     878:	41 e0       	ldi	r20, 0x01	; 1
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	64 e0       	ldi	r22, 0x04	; 4
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	08 95       	ret

0000089a <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <KEYPAD_read+0xe>
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <KEYPAD_read+0x10>
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <KEYPAD_read+0x12>
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     8b2:	85 e0       	ldi	r24, 0x05	; 5
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	86 e0       	ldi	r24, 0x06	; 6
     8b8:	8a 83       	std	Y+2, r24	; 0x02
     8ba:	87 e0       	ldi	r24, 0x07	; 7
     8bc:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     8be:	1c 82       	std	Y+4, r1	; 0x04
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	8d 83       	std	Y+5, r24	; 0x05
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	8e 83       	std	Y+6, r24	; 0x06

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     8c8:	00 e0       	ldi	r16, 0x00	; 0
     8ca:	79 c0       	rjmp	.+242    	; 0x9be <KEYPAD_read+0x124>
    {
		if (u8_a_rowiterator == 3 )
     8cc:	03 30       	cpi	r16, 0x03	; 3
     8ce:	39 f4       	brne	.+14     	; 0x8de <KEYPAD_read+0x44>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     8da:	10 e0       	ldi	r17, 0x00	; 0
     8dc:	62 c0       	rjmp	.+196    	; 0x9a2 <KEYPAD_read+0x108>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     8de:	e1 e0       	ldi	r30, 0x01	; 1
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	ec 0f       	add	r30, r28
     8e4:	fd 1f       	adc	r31, r29
     8e6:	e0 0f       	add	r30, r16
     8e8:	f1 1d       	adc	r31, r1
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	60 81       	ld	r22, Z
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     8f4:	f2 cf       	rjmp	.-28     	; 0x8da <KEYPAD_read+0x40>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     8f6:	e4 e0       	ldi	r30, 0x04	; 4
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ec 0f       	add	r30, r28
     8fc:	fd 1f       	adc	r31, r29
     8fe:	e1 0f       	add	r30, r17
     900:	f1 1d       	adc	r31, r1
     902:	a7 01       	movw	r20, r14
     904:	60 81       	ld	r22, Z
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     90c:	f7 01       	movw	r30, r14
     90e:	80 81       	ld	r24, Z
     910:	81 11       	cpse	r24, r1
     912:	46 c0       	rjmp	.+140    	; 0x9a0 <KEYPAD_read+0x106>
            {
                if (u8_a_rowiterator == 0)
     914:	01 11       	cpse	r16, r1
     916:	11 c0       	rjmp	.+34     	; 0x93a <KEYPAD_read+0xa0>
                {
                    if (u8_a_coulumniterator == 0)
     918:	11 11       	cpse	r17, r1
     91a:	03 c0       	rjmp	.+6      	; 0x922 <KEYPAD_read+0x88>
                    {
                        *u8_a_value = '1' ;
     91c:	81 e3       	ldi	r24, 0x31	; 49
     91e:	80 83       	st	Z, r24
     920:	33 c0       	rjmp	.+102    	; 0x988 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     922:	11 30       	cpi	r17, 0x01	; 1
     924:	21 f4       	brne	.+8      	; 0x92e <KEYPAD_read+0x94>
                    {
                        *u8_a_value = '2' ;
     926:	82 e3       	ldi	r24, 0x32	; 50
     928:	f7 01       	movw	r30, r14
     92a:	80 83       	st	Z, r24
     92c:	2d c0       	rjmp	.+90     	; 0x988 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     92e:	12 30       	cpi	r17, 0x02	; 2
     930:	59 f5       	brne	.+86     	; 0x988 <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '3' ;
     932:	83 e3       	ldi	r24, 0x33	; 51
     934:	f7 01       	movw	r30, r14
     936:	80 83       	st	Z, r24
     938:	27 c0       	rjmp	.+78     	; 0x988 <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 1)
     93a:	01 30       	cpi	r16, 0x01	; 1
     93c:	91 f4       	brne	.+36     	; 0x962 <KEYPAD_read+0xc8>
                {
                    if (u8_a_coulumniterator == 0)
     93e:	11 11       	cpse	r17, r1
     940:	04 c0       	rjmp	.+8      	; 0x94a <KEYPAD_read+0xb0>
                    {
                        *u8_a_value = '4' ;
     942:	84 e3       	ldi	r24, 0x34	; 52
     944:	f7 01       	movw	r30, r14
     946:	80 83       	st	Z, r24
     948:	1f c0       	rjmp	.+62     	; 0x988 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     94a:	11 30       	cpi	r17, 0x01	; 1
     94c:	21 f4       	brne	.+8      	; 0x956 <KEYPAD_read+0xbc>
                    {
                        *u8_a_value = '5' ;
     94e:	85 e3       	ldi	r24, 0x35	; 53
     950:	f7 01       	movw	r30, r14
     952:	80 83       	st	Z, r24
     954:	19 c0       	rjmp	.+50     	; 0x988 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     956:	12 30       	cpi	r17, 0x02	; 2
     958:	b9 f4       	brne	.+46     	; 0x988 <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '6' ;
     95a:	86 e3       	ldi	r24, 0x36	; 54
     95c:	f7 01       	movw	r30, r14
     95e:	80 83       	st	Z, r24
     960:	13 c0       	rjmp	.+38     	; 0x988 <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 2)
     962:	02 30       	cpi	r16, 0x02	; 2
     964:	89 f4       	brne	.+34     	; 0x988 <KEYPAD_read+0xee>
                {
                    if (u8_a_coulumniterator == 0)
     966:	11 11       	cpse	r17, r1
     968:	04 c0       	rjmp	.+8      	; 0x972 <KEYPAD_read+0xd8>
                    {
                        *u8_a_value = '7' ;
     96a:	87 e3       	ldi	r24, 0x37	; 55
     96c:	f7 01       	movw	r30, r14
     96e:	80 83       	st	Z, r24
     970:	0b c0       	rjmp	.+22     	; 0x988 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     972:	11 30       	cpi	r17, 0x01	; 1
     974:	21 f4       	brne	.+8      	; 0x97e <KEYPAD_read+0xe4>
                    {
                        *u8_a_value = '8' ;
     976:	88 e3       	ldi	r24, 0x38	; 56
     978:	f7 01       	movw	r30, r14
     97a:	80 83       	st	Z, r24
     97c:	05 c0       	rjmp	.+10     	; 0x988 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     97e:	12 30       	cpi	r17, 0x02	; 2
     980:	19 f4       	brne	.+6      	; 0x988 <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '9' ;
     982:	89 e3       	ldi	r24, 0x39	; 57
     984:	f7 01       	movw	r30, r14
     986:	80 83       	st	Z, r24
                    }
                }
				
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     988:	e1 e0       	ldi	r30, 0x01	; 1
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	ec 0f       	add	r30, r28
     98e:	fd 1f       	adc	r31, r29
     990:	e0 0f       	add	r30, r16
     992:	f1 1d       	adc	r31, r1
     994:	60 81       	ld	r22, Z
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_togglepin>
				return KEYPAD_readSuccess;
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	13 c0       	rjmp	.+38     	; 0x9c6 <KEYPAD_read+0x12c>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     9a0:	1f 5f       	subi	r17, 0xFF	; 255
     9a2:	13 30       	cpi	r17, 0x03	; 3
     9a4:	08 f4       	brcc	.+2      	; 0x9a8 <KEYPAD_read+0x10e>
     9a6:	a7 cf       	rjmp	.-178    	; 0x8f6 <KEYPAD_read+0x5c>
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
				return KEYPAD_readSuccess;
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     9a8:	e1 e0       	ldi	r30, 0x01	; 1
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	ec 0f       	add	r30, r28
     9ae:	fd 1f       	adc	r31, r29
     9b0:	e0 0f       	add	r30, r16
     9b2:	f1 1d       	adc	r31, r1
     9b4:	60 81       	ld	r22, Z
     9b6:	83 e0       	ldi	r24, 0x03	; 3
     9b8:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     9bc:	0f 5f       	subi	r16, 0xFF	; 255
     9be:	03 30       	cpi	r16, 0x03	; 3
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <KEYPAD_read+0x12a>
     9c2:	84 cf       	rjmp	.-248    	; 0x8cc <KEYPAD_read+0x32>
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	26 96       	adiw	r28, 0x06	; 6
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	08 95       	ret

000009e0 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     9e0:	cf 93       	push	r28
     9e2:	c8 2f       	mov	r28, r24
     9e4:	0e 94 29 09 	call	0x1252	; 0x1252 <TMR0_init>
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	62 e0       	ldi	r22, 0x02	; 2
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     a06:	8b b3       	in	r24, 0x1b	; 27
     a08:	9c 2f       	mov	r25, r28
     a0a:	90 7f       	andi	r25, 0xF0	; 240
     a0c:	8f 70       	andi	r24, 0x0F	; 15
     a0e:	89 2b       	or	r24, r25
     a10:	8b bb       	out	0x1b, r24	; 27
     a12:	41 e0       	ldi	r20, 0x01	; 1
     a14:	63 e0       	ldi	r22, 0x03	; 3
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	63 e0       	ldi	r22, 0x03	; 3
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     a32:	20 e1       	ldi	r18, 0x10	; 16
     a34:	c2 9f       	mul	r28, r18
     a36:	c0 01       	movw	r24, r0
     a38:	11 24       	eor	r1, r1
     a3a:	9b b3       	in	r25, 0x1b	; 27
     a3c:	9f 70       	andi	r25, 0x0F	; 15
     a3e:	89 2b       	or	r24, r25
     a40:	8b bb       	out	0x1b, r24	; 27
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	63 e0       	ldi	r22, 0x03	; 3
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	63 e0       	ldi	r22, 0x03	; 3
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     a62:	65 e0       	ldi	r22, 0x05	; 5
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <LCD_init>:
     a72:	0e 94 29 09 	call	0x1252	; 0x1252 <TMR0_init>
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	62 e0       	ldi	r22, 0x02	; 2
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
     a8a:	41 e0       	ldi	r20, 0x01	; 1
     a8c:	63 e0       	ldi	r22, 0x03	; 3
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	64 e0       	ldi	r22, 0x04	; 4
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
     a9e:	41 e0       	ldi	r20, 0x01	; 1
     aa0:	65 e0       	ldi	r22, 0x05	; 5
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	66 e0       	ldi	r22, 0x06	; 6
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
     ab2:	41 e0       	ldi	r20, 0x01	; 1
     ab4:	67 e0       	ldi	r22, 0x07	; 7
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
     abc:	64 e1       	ldi	r22, 0x14	; 20
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
     ac8:	83 e3       	ldi	r24, 0x33	; 51
     aca:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
     ace:	82 e3       	ldi	r24, 0x32	; 50
     ad0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
     ad4:	88 e2       	ldi	r24, 0x28	; 40
     ad6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
     ada:	8c e0       	ldi	r24, 0x0C	; 12
     adc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
     af2:	08 95       	ret

00000af4 <LCD_writechar>:
     af4:	cf 93       	push	r28
     af6:	c8 2f       	mov	r28, r24
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	63 e0       	ldi	r22, 0x03	; 3
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     b16:	8b b3       	in	r24, 0x1b	; 27
     b18:	9c 2f       	mov	r25, r28
     b1a:	90 7f       	andi	r25, 0xF0	; 240
     b1c:	8f 70       	andi	r24, 0x0F	; 15
     b1e:	89 2b       	or	r24, r25
     b20:	8b bb       	out	0x1b, r24	; 27
     b22:	41 e0       	ldi	r20, 0x01	; 1
     b24:	63 e0       	ldi	r22, 0x03	; 3
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	63 e0       	ldi	r22, 0x03	; 3
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     b42:	20 e1       	ldi	r18, 0x10	; 16
     b44:	c2 9f       	mul	r28, r18
     b46:	c0 01       	movw	r24, r0
     b48:	11 24       	eor	r1, r1
     b4a:	9b b3       	in	r25, 0x1b	; 27
     b4c:	9f 70       	andi	r25, 0x0F	; 15
     b4e:	89 2b       	or	r24, r25
     b50:	8b bb       	out	0x1b, r24	; 27
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	63 e0       	ldi	r22, 0x03	; 3
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	63 e0       	ldi	r22, 0x03	; 3
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
     b72:	65 e0       	ldi	r22, 0x05	; 5
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR0_delayms>
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <LCD_writestr>:
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	8c 01       	movw	r16, r24
     b8a:	c0 e0       	ldi	r28, 0x00	; 0
     b8c:	03 c0       	rjmp	.+6      	; 0xb94 <LCD_writestr+0x12>
     b8e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <LCD_writechar>
     b92:	cf 5f       	subi	r28, 0xFF	; 255
     b94:	f8 01       	movw	r30, r16
     b96:	ec 0f       	add	r30, r28
     b98:	f1 1d       	adc	r31, r1
     b9a:	80 81       	ld	r24, Z
     b9c:	81 11       	cpse	r24, r1
     b9e:	f7 cf       	rjmp	.-18     	; 0xb8e <LCD_writestr+0xc>
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	08 95       	ret

00000ba8 <LCD_goto>:
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	00 d0       	rcall	.+0      	; 0xbae <LCD_goto+0x6>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	90 e8       	ldi	r25, 0x80	; 128
     bb4:	99 83       	std	Y+1, r25	; 0x01
     bb6:	90 ec       	ldi	r25, 0xC0	; 192
     bb8:	9a 83       	std	Y+2, r25	; 0x02
     bba:	e1 e0       	ldi	r30, 0x01	; 1
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	ec 0f       	add	r30, r28
     bc0:	fd 1f       	adc	r31, r29
     bc2:	e8 0f       	add	r30, r24
     bc4:	f1 1d       	adc	r31, r1
     bc6:	80 81       	ld	r24, Z
     bc8:	86 0f       	add	r24, r22
     bca:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_sendcmd>
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	2a 97       	sbiw	r28, 0x0a	; 10
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     bee:	99 23       	and	r25, r25
     bf0:	dc f5       	brge	.+118    	; 0xc68 <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     bf2:	90 95       	com	r25
     bf4:	80 95       	com	r24
     bf6:	70 95       	com	r23
     bf8:	61 95       	neg	r22
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	8f 4f       	sbci	r24, 0xFF	; 255
     bfe:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     c00:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     c02:	13 c0       	rjmp	.+38     	; 0xc2a <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     c04:	2a e0       	ldi	r18, 0x0A	; 10
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__divmodsi4>
     c10:	e1 e0       	ldi	r30, 0x01	; 1
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	e1 0f       	add	r30, r17
     c1a:	f1 1d       	adc	r31, r1
     c1c:	60 5d       	subi	r22, 0xD0	; 208
     c1e:	60 83       	st	Z, r22
			s32_a_num /= 10;
     c20:	62 2f       	mov	r22, r18
     c22:	73 2f       	mov	r23, r19
     c24:	84 2f       	mov	r24, r20
     c26:	95 2f       	mov	r25, r21
			i++;
     c28:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     c2a:	16 16       	cp	r1, r22
     c2c:	17 06       	cpc	r1, r23
     c2e:	18 06       	cpc	r1, r24
     c30:	19 06       	cpc	r1, r25
     c32:	44 f3       	brlt	.-48     	; 0xc04 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     c34:	e1 e0       	ldi	r30, 0x01	; 1
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	ec 0f       	add	r30, r28
     c3a:	fd 1f       	adc	r31, r29
     c3c:	e1 0f       	add	r30, r17
     c3e:	f1 1d       	adc	r31, r1
     c40:	8d e2       	ldi	r24, 0x2D	; 45
     c42:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     c44:	1f 5f       	subi	r17, 0xFF	; 255
     c46:	0d c0       	rjmp	.+26     	; 0xc62 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     c48:	e1 2f       	mov	r30, r17
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	8c 0f       	add	r24, r28
     c54:	9d 1f       	adc	r25, r29
     c56:	e8 0f       	add	r30, r24
     c58:	f9 1f       	adc	r31, r25
     c5a:	80 81       	ld	r24, Z
     c5c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     c60:	11 50       	subi	r17, 0x01	; 1
     c62:	11 11       	cpse	r17, r1
     c64:	f1 cf       	rjmp	.-30     	; 0xc48 <LCD_writeint+0x70>
     c66:	39 c0       	rjmp	.+114    	; 0xcda <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     c68:	61 15       	cp	r22, r1
     c6a:	71 05       	cpc	r23, r1
     c6c:	81 05       	cpc	r24, r1
     c6e:	91 05       	cpc	r25, r1
     c70:	21 f4       	brne	.+8      	; 0xc7a <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     c72:	80 e3       	ldi	r24, 0x30	; 48
     c74:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <LCD_writechar>
     c78:	30 c0       	rjmp	.+96     	; 0xcda <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     c7a:	16 16       	cp	r1, r22
     c7c:	17 06       	cpc	r1, r23
     c7e:	18 06       	cpc	r1, r24
     c80:	19 06       	cpc	r1, r25
     c82:	ac f0       	brlt	.+42     	; 0xcae <LCD_writeint+0xd6>
     c84:	2a c0       	rjmp	.+84     	; 0xcda <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     c86:	2a e0       	ldi	r18, 0x0A	; 10
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__divmodsi4>
     c92:	e1 e0       	ldi	r30, 0x01	; 1
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	ec 0f       	add	r30, r28
     c98:	fd 1f       	adc	r31, r29
     c9a:	e1 0f       	add	r30, r17
     c9c:	f1 1d       	adc	r31, r1
     c9e:	60 5d       	subi	r22, 0xD0	; 208
     ca0:	60 83       	st	Z, r22
			s32_a_num /= 10;
     ca2:	62 2f       	mov	r22, r18
     ca4:	73 2f       	mov	r23, r19
     ca6:	84 2f       	mov	r24, r20
     ca8:	95 2f       	mov	r25, r21
			i++;
     caa:	1f 5f       	subi	r17, 0xFF	; 255
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <LCD_writeint+0xd8>
     cae:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     cb0:	16 16       	cp	r1, r22
     cb2:	17 06       	cpc	r1, r23
     cb4:	18 06       	cpc	r1, r24
     cb6:	19 06       	cpc	r1, r25
     cb8:	34 f3       	brlt	.-52     	; 0xc86 <LCD_writeint+0xae>
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     cbc:	e1 2f       	mov	r30, r17
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	31 97       	sbiw	r30, 0x01	; 1
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	8c 0f       	add	r24, r28
     cc8:	9d 1f       	adc	r25, r29
     cca:	e8 0f       	add	r30, r24
     ccc:	f9 1f       	adc	r31, r25
     cce:	80 81       	ld	r24, Z
     cd0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     cd4:	11 50       	subi	r17, 0x01	; 1
     cd6:	11 11       	cpse	r17, r1
     cd8:	f1 cf       	rjmp	.-30     	; 0xcbc <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     cda:	2a 96       	adiw	r28, 0x0a	; 10
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	08 95       	ret

00000cee <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	b9 f0       	breq	.+46     	; 0xd20 <MOTOR_init+0x32>
     cf2:	28 f0       	brcs	.+10     	; 0xcfe <MOTOR_init+0x10>
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	29 f1       	breq	.+74     	; 0xd42 <MOTOR_init+0x54>
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	a1 f1       	breq	.+104    	; 0xd64 <MOTOR_init+0x76>
     cfc:	44 c0       	rjmp	.+136    	; 0xd86 <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	62 e0       	ldi	r22, 0x02	; 2
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d1c:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     d1e:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	63 e0       	ldi	r22, 0x03	; 3
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	64 e0       	ldi	r22, 0x04	; 4
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	65 e0       	ldi	r22, 0x05	; 5
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d3e:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d40:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	62 e0       	ldi	r22, 0x02	; 2
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d60:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d62:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	63 e0       	ldi	r22, 0x03	; 3
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     d6e:	41 e0       	ldi	r20, 0x01	; 1
     d70:	64 e0       	ldi	r22, 0x04	; 4
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d78:	41 e0       	ldi	r20, 0x01	; 1
     d7a:	65 e0       	ldi	r22, 0x05	; 5
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d82:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d84:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d86:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     d88:	08 95       	ret

00000d8a <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	91 f0       	breq	.+36     	; 0xdb2 <MOTOR_rotateclkdir+0x28>
     d8e:	28 f0       	brcs	.+10     	; 0xd9a <MOTOR_rotateclkdir+0x10>
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	d9 f0       	breq	.+54     	; 0xdca <MOTOR_rotateclkdir+0x40>
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	29 f1       	breq	.+74     	; 0xde2 <MOTOR_rotateclkdir+0x58>
     d98:	30 c0       	rjmp	.+96     	; 0xdfa <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dae:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     db0:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	63 e0       	ldi	r22, 0x03	; 3
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	64 e0       	ldi	r22, 0x04	; 4
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dc6:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     dc8:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     dca:	41 e0       	ldi	r20, 0x01	; 1
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dde:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     de0:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     de2:	41 e0       	ldi	r20, 0x01	; 1
     de4:	63 e0       	ldi	r22, 0x03	; 3
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	64 e0       	ldi	r22, 0x04	; 4
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     df6:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     df8:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     dfa:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     dfc:	08 95       	ret

00000dfe <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	91 f0       	breq	.+36     	; 0xe26 <MOTOR_rotateanticlkdir+0x28>
     e02:	28 f0       	brcs	.+10     	; 0xe0e <MOTOR_rotateanticlkdir+0x10>
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	d9 f0       	breq	.+54     	; 0xe3e <MOTOR_rotateanticlkdir+0x40>
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	29 f1       	breq	.+74     	; 0xe56 <MOTOR_rotateanticlkdir+0x58>
     e0c:	30 c0       	rjmp	.+96     	; 0xe6e <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e22:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e24:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	63 e0       	ldi	r22, 0x03	; 3
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e30:	41 e0       	ldi	r20, 0x01	; 1
     e32:	64 e0       	ldi	r22, 0x04	; 4
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e3a:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e3c:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e52:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e54:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	63 e0       	ldi	r22, 0x03	; 3
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	64 e0       	ldi	r22, 0x04	; 4
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e6a:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e6c:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e6e:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     e70:	08 95       	ret

00000e72 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	69 f0       	breq	.+26     	; 0xe90 <MOTOR_turnoff+0x1e>
     e76:	28 f0       	brcs	.+10     	; 0xe82 <MOTOR_turnoff+0x10>
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	89 f0       	breq	.+34     	; 0xe9e <MOTOR_turnoff+0x2c>
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	b1 f0       	breq	.+44     	; 0xeac <MOTOR_turnoff+0x3a>
     e80:	1c c0       	rjmp	.+56     	; 0xeba <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	62 e0       	ldi	r22, 0x02	; 2
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e8c:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e8e:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	65 e0       	ldi	r22, 0x05	; 5
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e9a:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e9c:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	62 e0       	ldi	r22, 0x02	; 2
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ea8:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     eaa:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	65 e0       	ldi	r22, 0x05	; 5
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     eb6:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     eb8:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     eba:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     ebc:	08 95       	ret

00000ebe <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	69 f0       	breq	.+26     	; 0xedc <MOTOR_turnon+0x1e>
     ec2:	28 f0       	brcs	.+10     	; 0xece <MOTOR_turnon+0x10>
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	89 f0       	breq	.+34     	; 0xeea <MOTOR_turnon+0x2c>
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	b1 f0       	breq	.+44     	; 0xef8 <MOTOR_turnon+0x3a>
     ecc:	1c c0       	rjmp	.+56     	; 0xf06 <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	62 e0       	ldi	r22, 0x02	; 2
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ed8:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     eda:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	65 e0       	ldi	r22, 0x05	; 5
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ee6:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     ee8:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	62 e0       	ldi	r22, 0x02	; 2
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ef4:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     ef6:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	65 e0       	ldi	r22, 0x05	; 5
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     f02:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     f04:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     f06:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     f08:	08 95       	ret

00000f0a <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_setpindir>
     f14:	08 95       	ret

00000f16 <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     f20:	6f e0       	ldi	r22, 0x0F	; 15
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 8c 09 	call	0x1318	; 0x1318 <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 22 08 	call	0x1044	; 0x1044 <DIO_setpinvalue>
}
     f36:	08 95       	ret

00000f38 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     f38:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     f3c:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
	
    while (1) 
    {	
		APP_start(); /** SUPER LOOP **/	
     f40:	0e 94 11 01 	call	0x222	; 0x222 <APP_start>
     f44:	fd cf       	rjmp	.-6      	; 0xf40 <main+0x8>

00000f46 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     f46:	44 23       	and	r20, r20
     f48:	19 f0       	breq	.+6      	; 0xf50 <DIO_setpindir+0xa>
     f4a:	41 30       	cpi	r20, 0x01	; 1
     f4c:	e9 f1       	breq	.+122    	; 0xfc8 <DIO_setpindir+0x82>
     f4e:	74 c0       	rjmp	.+232    	; 0x1038 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	99 f0       	breq	.+38     	; 0xf7a <DIO_setpindir+0x34>
     f54:	28 f0       	brcs	.+10     	; 0xf60 <DIO_setpindir+0x1a>
     f56:	82 30       	cpi	r24, 0x02	; 2
     f58:	e9 f0       	breq	.+58     	; 0xf94 <DIO_setpindir+0x4e>
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	41 f1       	breq	.+80     	; 0xfae <DIO_setpindir+0x68>
     f5e:	6e c0       	rjmp	.+220    	; 0x103c <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     f60:	2a b3       	in	r18, 0x1a	; 26
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_setpindir+0x26>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	6a 95       	dec	r22
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_setpindir+0x22>
     f70:	80 95       	com	r24
     f72:	82 23       	and	r24, r18
     f74:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f76:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     f78:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     f7a:	27 b3       	in	r18, 0x17	; 23
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_setpindir+0x40>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	6a 95       	dec	r22
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_setpindir+0x3c>
     f8a:	80 95       	com	r24
     f8c:	82 23       	and	r24, r18
     f8e:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f90:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     f92:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     f94:	24 b3       	in	r18, 0x14	; 20
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_setpindir+0x5a>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	6a 95       	dec	r22
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_setpindir+0x56>
     fa4:	80 95       	com	r24
     fa6:	82 23       	and	r24, r18
     fa8:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     faa:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     fac:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     fae:	21 b3       	in	r18, 0x11	; 17
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_setpindir+0x74>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	6a 95       	dec	r22
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_setpindir+0x70>
     fbe:	80 95       	com	r24
     fc0:	82 23       	and	r24, r18
     fc2:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fc4:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     fc6:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	91 f0       	breq	.+36     	; 0xff0 <DIO_setpindir+0xaa>
     fcc:	28 f0       	brcs	.+10     	; 0xfd8 <DIO_setpindir+0x92>
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	d9 f0       	breq	.+54     	; 0x1008 <DIO_setpindir+0xc2>
     fd2:	83 30       	cpi	r24, 0x03	; 3
     fd4:	29 f1       	breq	.+74     	; 0x1020 <DIO_setpindir+0xda>
     fd6:	34 c0       	rjmp	.+104    	; 0x1040 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     fd8:	2a b3       	in	r18, 0x1a	; 26
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_setpindir+0x9e>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	6a 95       	dec	r22
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_setpindir+0x9a>
     fe8:	82 2b       	or	r24, r18
     fea:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fec:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     fee:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     ff0:	27 b3       	in	r18, 0x17	; 23
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_setpindir+0xb6>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	6a 95       	dec	r22
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_setpindir+0xb2>
    1000:	82 2b       	or	r24, r18
    1002:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
    1004:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
    1006:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
    1008:	24 b3       	in	r18, 0x14	; 20
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_setpindir+0xce>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	6a 95       	dec	r22
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_setpindir+0xca>
    1018:	82 2b       	or	r24, r18
    101a:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
    101c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
    101e:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
    1020:	21 b3       	in	r18, 0x11	; 17
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_setpindir+0xe6>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	6a 95       	dec	r22
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_setpindir+0xe2>
    1030:	82 2b       	or	r24, r18
    1032:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
    1034:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
    1036:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
    1040:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
    1042:	08 95       	ret

00001044 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
    1044:	44 23       	and	r20, r20
    1046:	19 f0       	breq	.+6      	; 0x104e <DIO_setpinvalue+0xa>
    1048:	41 30       	cpi	r20, 0x01	; 1
    104a:	e9 f1       	breq	.+122    	; 0x10c6 <DIO_setpinvalue+0x82>
    104c:	74 c0       	rjmp	.+232    	; 0x1136 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	99 f0       	breq	.+38     	; 0x1078 <DIO_setpinvalue+0x34>
    1052:	28 f0       	brcs	.+10     	; 0x105e <DIO_setpinvalue+0x1a>
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	e9 f0       	breq	.+58     	; 0x1092 <DIO_setpinvalue+0x4e>
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	41 f1       	breq	.+80     	; 0x10ac <DIO_setpinvalue+0x68>
    105c:	6e c0       	rjmp	.+220    	; 0x113a <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    105e:	2b b3       	in	r18, 0x1b	; 27
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_setpinvalue+0x26>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	6a 95       	dec	r22
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_setpinvalue+0x22>
    106e:	80 95       	com	r24
    1070:	82 23       	and	r24, r18
    1072:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1074:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    1076:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    1078:	28 b3       	in	r18, 0x18	; 24
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_setpinvalue+0x40>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	6a 95       	dec	r22
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_setpinvalue+0x3c>
    1088:	80 95       	com	r24
    108a:	82 23       	and	r24, r18
    108c:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    108e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    1090:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    1092:	25 b3       	in	r18, 0x15	; 21
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_setpinvalue+0x5a>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	6a 95       	dec	r22
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_setpinvalue+0x56>
    10a2:	80 95       	com	r24
    10a4:	82 23       	and	r24, r18
    10a6:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10a8:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    10aa:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    10ac:	22 b3       	in	r18, 0x12	; 18
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_setpinvalue+0x74>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	6a 95       	dec	r22
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_setpinvalue+0x70>
    10bc:	80 95       	com	r24
    10be:	82 23       	and	r24, r18
    10c0:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10c2:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    10c4:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	91 f0       	breq	.+36     	; 0x10ee <DIO_setpinvalue+0xaa>
    10ca:	28 f0       	brcs	.+10     	; 0x10d6 <DIO_setpinvalue+0x92>
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	d9 f0       	breq	.+54     	; 0x1106 <DIO_setpinvalue+0xc2>
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	29 f1       	breq	.+74     	; 0x111e <DIO_setpinvalue+0xda>
    10d4:	34 c0       	rjmp	.+104    	; 0x113e <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    10d6:	2b b3       	in	r18, 0x1b	; 27
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_setpinvalue+0x9e>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	6a 95       	dec	r22
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_setpinvalue+0x9a>
    10e6:	82 2b       	or	r24, r18
    10e8:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10ea:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    10ec:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    10ee:	28 b3       	in	r18, 0x18	; 24
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_setpinvalue+0xb6>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	6a 95       	dec	r22
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_setpinvalue+0xb2>
    10fe:	82 2b       	or	r24, r18
    1100:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1102:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1104:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1106:	25 b3       	in	r18, 0x15	; 21
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_setpinvalue+0xce>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	6a 95       	dec	r22
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_setpinvalue+0xca>
    1116:	82 2b       	or	r24, r18
    1118:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    111a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    111c:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    111e:	22 b3       	in	r18, 0x12	; 18
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_setpinvalue+0xe6>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	6a 95       	dec	r22
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_setpinvalue+0xe2>
    112e:	82 2b       	or	r24, r18
    1130:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1132:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1134:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    113e:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
    1140:	08 95       	ret

00001142 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	99 f0       	breq	.+38     	; 0x116c <DIO_readpin+0x2a>
    1146:	28 f0       	brcs	.+10     	; 0x1152 <DIO_readpin+0x10>
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	e9 f0       	breq	.+58     	; 0x1186 <DIO_readpin+0x44>
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	41 f1       	breq	.+80     	; 0x11a0 <DIO_readpin+0x5e>
    1150:	34 c0       	rjmp	.+104    	; 0x11ba <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1152:	89 b3       	in	r24, 0x19	; 25
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_readpin+0x1a>
    1158:	95 95       	asr	r25
    115a:	87 95       	ror	r24
    115c:	6a 95       	dec	r22
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_readpin+0x16>
    1160:	81 70       	andi	r24, 0x01	; 1
    1162:	89 bb       	out	0x19, r24	; 25
    1164:	fa 01       	movw	r30, r20
    1166:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1168:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    116a:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    116c:	86 b3       	in	r24, 0x16	; 22
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_readpin+0x34>
    1172:	95 95       	asr	r25
    1174:	87 95       	ror	r24
    1176:	6a 95       	dec	r22
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_readpin+0x30>
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	86 bb       	out	0x16, r24	; 22
    117e:	fa 01       	movw	r30, r20
    1180:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1182:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    1184:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1186:	83 b3       	in	r24, 0x13	; 19
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_readpin+0x4e>
    118c:	95 95       	asr	r25
    118e:	87 95       	ror	r24
    1190:	6a 95       	dec	r22
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_readpin+0x4a>
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	83 bb       	out	0x13, r24	; 19
    1198:	fa 01       	movw	r30, r20
    119a:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    119c:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    119e:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    11a0:	80 b3       	in	r24, 0x10	; 16
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_readpin+0x68>
    11a6:	95 95       	asr	r25
    11a8:	87 95       	ror	r24
    11aa:	6a 95       	dec	r22
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_readpin+0x64>
    11ae:	81 70       	andi	r24, 0x01	; 1
    11b0:	80 bb       	out	0x10, r24	; 16
    11b2:	fa 01       	movw	r30, r20
    11b4:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11b6:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    11b8:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
    11ba:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
    11bc:	08 95       	ret

000011be <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 f0       	breq	.+36     	; 0x11e6 <DIO_togglepin+0x28>
    11c2:	28 f0       	brcs	.+10     	; 0x11ce <DIO_togglepin+0x10>
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	d9 f0       	breq	.+54     	; 0x11fe <DIO_togglepin+0x40>
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	29 f1       	breq	.+74     	; 0x1216 <DIO_togglepin+0x58>
    11cc:	30 c0       	rjmp	.+96     	; 0x122e <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
    11ce:	2b b3       	in	r18, 0x1b	; 27
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_togglepin+0x1c>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	6a 95       	dec	r22
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_togglepin+0x18>
    11de:	82 27       	eor	r24, r18
    11e0:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11e2:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
    11e4:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
    11e6:	28 b3       	in	r18, 0x18	; 24
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_togglepin+0x34>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	6a 95       	dec	r22
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_togglepin+0x30>
    11f6:	82 27       	eor	r24, r18
    11f8:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11fa:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
    11fc:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
    11fe:	25 b3       	in	r18, 0x15	; 21
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_togglepin+0x4c>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	6a 95       	dec	r22
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_togglepin+0x48>
    120e:	82 27       	eor	r24, r18
    1210:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1212:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
    1214:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
    1216:	22 b3       	in	r18, 0x12	; 18
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_togglepin+0x64>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	6a 95       	dec	r22
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_togglepin+0x60>
    1226:	82 27       	eor	r24, r18
    1228:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    122a:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
    122c:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
    122e:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
    1230:	08 95       	ret

00001232 <SET_GLOBALINTERRUPT>:
/** RETURNS    : VOID                                   */
/********************************************************/
void SET_GLOBALINTERRUPT(void)
{
	#if GLOBAL_INTERRUPT_STATE  ==  GLOBAL_INTERRUPT_STATE_ENABLE /** ENABLE GLOBAL INTERRUPTS **/
	  set_bit(SREG , 7);
    1232:	8f b7       	in	r24, 0x3f	; 63
    1234:	80 68       	ori	r24, 0x80	; 128
    1236:	8f bf       	out	0x3f, r24	; 63
    1238:	08 95       	ret

0000123a <INT0_init>:
/** ARGUMENTS  : VOID                                   */
/** RETURNS    : VOID                                   */
/********************************************************/
void INT0_init(void)
{
	SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS */
    123a:	0e 94 19 09 	call	0x1232	; 0x1232 <SET_GLOBALINTERRUPT>
	  clear_bit(MCUCR , 0);
	  clear_bit(MCUCR , 1);
	  
	#elif EXTERNAL_INT0_TRIGGER  == INT_TRIGGER_ANY_CHANGE
	
	  set_bit(MCUCR , 0);
    123e:	85 b7       	in	r24, 0x35	; 53
    1240:	81 60       	ori	r24, 0x01	; 1
    1242:	85 bf       	out	0x35, r24	; 53
	  clear_bit(MCUCR ,1);
    1244:	85 b7       	in	r24, 0x35	; 53
    1246:	8d 7f       	andi	r24, 0xFD	; 253
    1248:	85 bf       	out	0x35, r24	; 53
	  
	#endif
	
	/* Enable INT0 */
	set_bit(GICR , 6);	
    124a:	8b b7       	in	r24, 0x3b	; 59
    124c:	80 64       	ori	r24, 0x40	; 64
    124e:	8b bf       	out	0x3b, r24	; 59
    1250:	08 95       	ret

00001252 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
    1252:	83 b7       	in	r24, 0x33	; 51
    1254:	8f 77       	andi	r24, 0x7F	; 127
    1256:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
    1258:	83 b7       	in	r24, 0x33	; 51
    125a:	8f 7b       	andi	r24, 0xBF	; 191
    125c:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
    125e:	83 b7       	in	r24, 0x33	; 51
    1260:	87 7f       	andi	r24, 0xF7	; 247
    1262:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
    1264:	83 b7       	in	r24, 0x33	; 51
    1266:	8f 7e       	andi	r24, 0xEF	; 239
    1268:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
    126a:	83 b7       	in	r24, 0x33	; 51
    126c:	8f 7d       	andi	r24, 0xDF	; 223
    126e:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	08 95       	ret

00001274 <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
    1274:	83 b7       	in	r24, 0x33	; 51
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
    127a:	83 b7       	in	r24, 0x33	; 51
    127c:	8d 7f       	andi	r24, 0xFD	; 253
    127e:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
    1280:	83 b7       	in	r24, 0x33	; 51
    1282:	8b 7f       	andi	r24, 0xFB	; 251
    1284:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	08 95       	ret

0000128a <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
    128a:	83 b7       	in	r24, 0x33	; 51
    128c:	8e 7f       	andi	r24, 0xFE	; 254
    128e:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
    1290:	83 b7       	in	r24, 0x33	; 51
    1292:	8d 7f       	andi	r24, 0xFD	; 253
    1294:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
    1296:	83 b7       	in	r24, 0x33	; 51
    1298:	8b 7f       	andi	r24, 0xFB	; 251
    129a:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	08 95       	ret

000012a0 <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    12a0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__floatunsisf>
    12a4:	2f e6       	ldi	r18, 0x6F	; 111
    12a6:	32 e1       	ldi	r19, 0x12	; 18
    12a8:	43 e0       	ldi	r20, 0x03	; 3
    12aa:	5d e3       	ldi	r21, 0x3D	; 61
    12ac:	0e 94 37 0a 	call	0x146e	; 0x146e <__divsf3>
    12b0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
    12b4:	60 93 ab 00 	sts	0x00AB, r22	; 0x8000ab <u32_gs_tmr0nuofovs>
    12b8:	70 93 ac 00 	sts	0x00AC, r23	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    12bc:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    12c0:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    12c4:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    12c6:	0e 94 3a 09 	call	0x1274	; 0x1274 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    12d0:	0a c0       	rjmp	.+20     	; 0x12e6 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    12d2:	08 b6       	in	r0, 0x38	; 56
    12d4:	00 fe       	sbrs	r0, 0
    12d6:	fd cf       	rjmp	.-6      	; 0x12d2 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    12d8:	88 b7       	in	r24, 0x38	; 56
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    12de:	4f 5f       	subi	r20, 0xFF	; 255
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	6f 4f       	sbci	r22, 0xFF	; 255
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    12e6:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
    12ea:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    12ee:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    12f2:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    12f6:	48 17       	cp	r20, r24
    12f8:	59 07       	cpc	r21, r25
    12fa:	6a 07       	cpc	r22, r26
    12fc:	7b 07       	cpc	r23, r27
    12fe:	48 f3       	brcs	.-46     	; 0x12d2 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
    1300:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u32_gs_tmr0nuofovs>
    1304:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    1308:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    130c:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    1310:	0e 94 45 09 	call	0x128a	; 0x128a <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	08 95       	ret

00001318 <TMR0_delaymicros>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 32);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	68 94       	set
    131e:	14 f8       	bld	r1, 4
    1320:	b6 95       	lsr	r27
    1322:	a7 95       	ror	r26
    1324:	97 95       	ror	r25
    1326:	87 95       	ror	r24
    1328:	16 94       	lsr	r1
    132a:	d1 f7       	brne	.-12     	; 0x1320 <TMR0_delaymicros+0x8>
    132c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <u32_gs_tmr0nuofovs>
    1330:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    1334:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    1338:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    133c:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    133e:	0e 94 3a 09 	call	0x1274	; 0x1274 <TMR0_start>
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicros(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    1348:	0a c0       	rjmp	.+20     	; 0x135e <TMR0_delaymicros+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    134a:	08 b6       	in	r0, 0x38	; 56
    134c:	00 fe       	sbrs	r0, 0
    134e:	fd cf       	rjmp	.-6      	; 0x134a <TMR0_delaymicros+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    1350:	88 b7       	in	r24, 0x38	; 56
    1352:	81 60       	ori	r24, 0x01	; 1
    1354:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    1356:	4f 5f       	subi	r20, 0xFF	; 255
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	6f 4f       	sbci	r22, 0xFF	; 255
    135c:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    135e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
    1362:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    1366:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    136a:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    136e:	48 17       	cp	r20, r24
    1370:	59 07       	cpc	r21, r25
    1372:	6a 07       	cpc	r22, r26
    1374:	7b 07       	cpc	r23, r27
    1376:	48 f3       	brcs	.-46     	; 0x134a <TMR0_delaymicros+0x32>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    1378:	0e 94 45 09 	call	0x128a	; 0x128a <TMR0_stop>
	
	return en_a_delaystatus ; 
}
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	08 95       	ret

00001380 <TMR1_init>:
	 
	#elif TMR1_CLK_SOURCE == TMR1_INTERNAL_CLK_SOURCE
	
	 #if TMR1_MODE == NORMAL_MODE
	  
	  clear_bit(TCCR1A , 0);
    1380:	8f b5       	in	r24, 0x2f	; 47
    1382:	8e 7f       	andi	r24, 0xFE	; 254
    1384:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1A , 1);
    1386:	8f b5       	in	r24, 0x2f	; 47
    1388:	8d 7f       	andi	r24, 0xFD	; 253
    138a:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1B , 3);
    138c:	8e b5       	in	r24, 0x2e	; 46
    138e:	87 7f       	andi	r24, 0xF7	; 247
    1390:	8e bd       	out	0x2e, r24	; 46
	  clear_bit(TCCR1B , 4);
    1392:	8e b5       	in	r24, 0x2e	; 46
    1394:	8f 7e       	andi	r24, 0xEF	; 239
    1396:	8e bd       	out	0x2e, r24	; 46
	  
	  /* NON PWM MODE */
	  set_bit(TCCR1A , 2);
    1398:	8f b5       	in	r24, 0x2f	; 47
    139a:	84 60       	ori	r24, 0x04	; 4
    139c:	8f bd       	out	0x2f, r24	; 47
	  set_bit(TCCR1A , 3);
    139e:	8f b5       	in	r24, 0x2f	; 47
    13a0:	88 60       	ori	r24, 0x08	; 8
    13a2:	8f bd       	out	0x2f, r24	; 47
	  
	  /* ENABLE INTERRUPT */
	  set_bit(SREG , 7);   /** ENABLE GLOBAL INTTERUPTS **/
    13a4:	8f b7       	in	r24, 0x3f	; 63
    13a6:	80 68       	ori	r24, 0x80	; 128
    13a8:	8f bf       	out	0x3f, r24	; 63
	  set_bit(TIMSK , 2);  /** NABLE TMR1 INTERRUPT **/
    13aa:	89 b7       	in	r24, 0x39	; 57
    13ac:	9a b7       	in	r25, 0x3a	; 58
    13ae:	84 60       	ori	r24, 0x04	; 4
    13b0:	9a bf       	out	0x3a, r25	; 58
    13b2:	89 bf       	out	0x39, r24	; 57
	 /* SET THE OC1B BIT AS OUTPUT */
	 DIO_setpindir(DIO_PORTD , DIO_PIN4 , DIO_PIN_OUTPUT);
	#endif
	#endif
#endif
}
    13b4:	08 95       	ret

000013b6 <TMR1_start>:
/******************************************************************************/
TMR1_start_status TMR1_start(void)
{
  TMR1_start_status en_a_startstatus = TMR1_NOT_VALID_START ; /** VARIABLE TO HOLD THE RETURN STATUS **/
  
  TCNT1 = 0 ;   /** SET THE INITIAL VALUE IN TCNT1 REGISTER **/
    13b6:	1d bc       	out	0x2d, r1	; 45
    13b8:	1c bc       	out	0x2c, r1	; 44

         en_a_startstatus = TMR1_VALID_START ; /** STATUS IS VALID **/
	 
	 #elif TMR1_PRESCALLER_VALUE == NO_PRESCALER
	 
	 set_bit(TCCR1B , 0);
    13ba:	8e b5       	in	r24, 0x2e	; 46
    13bc:	81 60       	ori	r24, 0x01	; 1
    13be:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 1);
    13c0:	8e b5       	in	r24, 0x2e	; 46
    13c2:	8d 7f       	andi	r24, 0xFD	; 253
    13c4:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 2);
    13c6:	8e b5       	in	r24, 0x2e	; 46
    13c8:	8b 7f       	andi	r24, 0xFB	; 251
    13ca:	8e bd       	out	0x2e, r24	; 46

	 #endif
	#endif

  return en_a_startstatus ; /** RETURN THE FINAL STATUS **/
}
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	08 95       	ret

000013d0 <TMR1_stop>:
TMR1_stop_status TMR1_stop(void)
{
     TMR1_stop_status en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** VARIABLE TO HOLD THE RETURN STATUS  **/
	
     /* TURN THE CLOCK OFF */
     clear_bit(TCCR1B , 0);
    13d0:	8e b5       	in	r24, 0x2e	; 46
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 1);
    13d6:	8e b5       	in	r24, 0x2e	; 46
    13d8:	8d 7f       	andi	r24, 0xFD	; 253
    13da:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 2);
    13dc:	8e b5       	in	r24, 0x2e	; 46
    13de:	8b 7f       	andi	r24, 0xFB	; 251
    13e0:	8e bd       	out	0x2e, r24	; 46

     en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** UPDATE THE STOP STATUS **/

     return en_a_stopstatus ; /** RETURN THE FINAL STATUS **/

}
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	08 95       	ret

000013e6 <TMR1_getvalue>:
/** ARGUMENTS  : u16_a_value                                                 **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_getvalue(uint16t * u16_a_value)
{
	*u16_a_value = TCNT1 ; /** GET THE VALUE FROM TIMER1 COUNTING REGISTER **/
    13e6:	2c b5       	in	r18, 0x2c	; 44
    13e8:	3d b5       	in	r19, 0x2d	; 45
    13ea:	fc 01       	movw	r30, r24
    13ec:	31 83       	std	Z+1, r19	; 0x01
    13ee:	20 83       	st	Z, r18
    13f0:	08 95       	ret

000013f2 <TMR1_setcounterval>:
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
void TMR1_setcounterval(uint16t u16_a_tmrval)
{
	TCNT1 = u16_a_tmrval ; /** SET THE PASSED VALUE IN TIMER COUNTING REGISTER **/
    13f2:	9d bd       	out	0x2d, r25	; 45
    13f4:	8c bd       	out	0x2c, r24	; 44
    13f6:	08 95       	ret

000013f8 <TMR2_init>:
	/* TIMER MODE OF TMR0 */
	#elif TIMER2_CLK_SRC == INTERNAL_CLK_SRC
	
	#if TIMER2_MODE == TMR2_NORMAL_MODE
	
	clear_bit(TCCR2 , 7);
    13f8:	85 b5       	in	r24, 0x25	; 37
    13fa:	8f 77       	andi	r24, 0x7F	; 127
    13fc:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 6);
    13fe:	85 b5       	in	r24, 0x25	; 37
    1400:	8f 7b       	andi	r24, 0xBF	; 191
    1402:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 3);
    1404:	85 b5       	in	r24, 0x25	; 37
    1406:	87 7f       	andi	r24, 0xF7	; 247
    1408:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 4);
    140a:	85 b5       	in	r24, 0x25	; 37
    140c:	8f 7e       	andi	r24, 0xEF	; 239
    140e:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 5);
    1410:	85 b5       	in	r24, 0x25	; 37
    1412:	8f 7d       	andi	r24, 0xDF	; 223
    1414:	85 bd       	out	0x25, r24	; 37
	
	/* ENABLE INTERRUPT */
	set_bit(SREG , 7);
    1416:	8f b7       	in	r24, 0x3f	; 63
    1418:	80 68       	ori	r24, 0x80	; 128
    141a:	8f bf       	out	0x3f, r24	; 63
	set_bit(TIMSK , 6);
    141c:	89 b7       	in	r24, 0x39	; 57
    141e:	80 64       	ori	r24, 0x40	; 64
    1420:	89 bf       	out	0x39, r24	; 57
	#endif
	#endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	08 95       	ret

00001426 <TMR2_start>:
	
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR2 , 0);
    1426:	85 b5       	in	r24, 0x25	; 37
    1428:	81 60       	ori	r24, 0x01	; 1
    142a:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    142c:	85 b5       	in	r24, 0x25	; 37
    142e:	8d 7f       	andi	r24, 0xFD	; 253
    1430:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    1432:	85 b5       	in	r24, 0x25	; 37
    1434:	8b 7f       	andi	r24, 0xFB	; 251
    1436:	85 bd       	out	0x25, r24	; 37
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	08 95       	ret

0000143c <TMR2_stop>:
TMR2_stop_error TMR2_stop(void)
{
	TMR2_stop_error en_a_stopStatus = TMR2_VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR2 , 0);
    143c:	85 b5       	in	r24, 0x25	; 37
    143e:	8e 7f       	andi	r24, 0xFE	; 254
    1440:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    1442:	85 b5       	in	r24, 0x25	; 37
    1444:	8d 7f       	andi	r24, 0xFD	; 253
    1446:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    1448:	85 b5       	in	r24, 0x25	; 37
    144a:	8b 7f       	andi	r24, 0xFB	; 251
    144c:	85 bd       	out	0x25, r24	; 37
	
	en_a_stopStatus = TMR2_VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	08 95       	ret

00001452 <TMR2_getovs>:
	u32_a_ovs = (u16_a_delay / 0.256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
	

	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	u32_a_ovs = (u16_a_delay / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1452:	bc 01       	movw	r22, r24
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__floatunsisf>
    145c:	2f e6       	ldi	r18, 0x6F	; 111
    145e:	32 e1       	ldi	r19, 0x12	; 18
    1460:	43 e0       	ldi	r20, 0x03	; 3
    1462:	5d e3       	ldi	r21, 0x3D	; 61
    1464:	0e 94 37 0a 	call	0x146e	; 0x146e <__divsf3>
    1468:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
	
	#endif
	
	return u32_a_ovs ;  /** RETURN THE CALCULATED NUMBER OF OVERFLOWS **/
}
    146c:	08 95       	ret

0000146e <__divsf3>:
    146e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__divsf3x>
    1472:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_round>
    1476:	0e 94 25 0b 	call	0x164a	; 0x164a <__fp_pscB>
    147a:	58 f0       	brcs	.+22     	; 0x1492 <__divsf3+0x24>
    147c:	0e 94 1e 0b 	call	0x163c	; 0x163c <__fp_pscA>
    1480:	40 f0       	brcs	.+16     	; 0x1492 <__divsf3+0x24>
    1482:	29 f4       	brne	.+10     	; 0x148e <__divsf3+0x20>
    1484:	5f 3f       	cpi	r21, 0xFF	; 255
    1486:	29 f0       	breq	.+10     	; 0x1492 <__divsf3+0x24>
    1488:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__fp_inf>
    148c:	51 11       	cpse	r21, r1
    148e:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__fp_szero>
    1492:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__fp_nan>

00001496 <__divsf3x>:
    1496:	0e 94 3d 0b 	call	0x167a	; 0x167a <__fp_split3>
    149a:	68 f3       	brcs	.-38     	; 0x1476 <__divsf3+0x8>

0000149c <__divsf3_pse>:
    149c:	99 23       	and	r25, r25
    149e:	b1 f3       	breq	.-20     	; 0x148c <__divsf3+0x1e>
    14a0:	55 23       	and	r21, r21
    14a2:	91 f3       	breq	.-28     	; 0x1488 <__divsf3+0x1a>
    14a4:	95 1b       	sub	r25, r21
    14a6:	55 0b       	sbc	r21, r21
    14a8:	bb 27       	eor	r27, r27
    14aa:	aa 27       	eor	r26, r26
    14ac:	62 17       	cp	r22, r18
    14ae:	73 07       	cpc	r23, r19
    14b0:	84 07       	cpc	r24, r20
    14b2:	38 f0       	brcs	.+14     	; 0x14c2 <__divsf3_pse+0x26>
    14b4:	9f 5f       	subi	r25, 0xFF	; 255
    14b6:	5f 4f       	sbci	r21, 0xFF	; 255
    14b8:	22 0f       	add	r18, r18
    14ba:	33 1f       	adc	r19, r19
    14bc:	44 1f       	adc	r20, r20
    14be:	aa 1f       	adc	r26, r26
    14c0:	a9 f3       	breq	.-22     	; 0x14ac <__divsf3_pse+0x10>
    14c2:	35 d0       	rcall	.+106    	; 0x152e <__divsf3_pse+0x92>
    14c4:	0e 2e       	mov	r0, r30
    14c6:	3a f0       	brmi	.+14     	; 0x14d6 <__divsf3_pse+0x3a>
    14c8:	e0 e8       	ldi	r30, 0x80	; 128
    14ca:	32 d0       	rcall	.+100    	; 0x1530 <__divsf3_pse+0x94>
    14cc:	91 50       	subi	r25, 0x01	; 1
    14ce:	50 40       	sbci	r21, 0x00	; 0
    14d0:	e6 95       	lsr	r30
    14d2:	00 1c       	adc	r0, r0
    14d4:	ca f7       	brpl	.-14     	; 0x14c8 <__divsf3_pse+0x2c>
    14d6:	2b d0       	rcall	.+86     	; 0x152e <__divsf3_pse+0x92>
    14d8:	fe 2f       	mov	r31, r30
    14da:	29 d0       	rcall	.+82     	; 0x152e <__divsf3_pse+0x92>
    14dc:	66 0f       	add	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	bb 1f       	adc	r27, r27
    14e4:	26 17       	cp	r18, r22
    14e6:	37 07       	cpc	r19, r23
    14e8:	48 07       	cpc	r20, r24
    14ea:	ab 07       	cpc	r26, r27
    14ec:	b0 e8       	ldi	r27, 0x80	; 128
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <__divsf3_pse+0x56>
    14f0:	bb 0b       	sbc	r27, r27
    14f2:	80 2d       	mov	r24, r0
    14f4:	bf 01       	movw	r22, r30
    14f6:	ff 27       	eor	r31, r31
    14f8:	93 58       	subi	r25, 0x83	; 131
    14fa:	5f 4f       	sbci	r21, 0xFF	; 255
    14fc:	3a f0       	brmi	.+14     	; 0x150c <__divsf3_pse+0x70>
    14fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1500:	51 05       	cpc	r21, r1
    1502:	78 f0       	brcs	.+30     	; 0x1522 <__divsf3_pse+0x86>
    1504:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__fp_inf>
    1508:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__fp_szero>
    150c:	5f 3f       	cpi	r21, 0xFF	; 255
    150e:	e4 f3       	brlt	.-8      	; 0x1508 <__divsf3_pse+0x6c>
    1510:	98 3e       	cpi	r25, 0xE8	; 232
    1512:	d4 f3       	brlt	.-12     	; 0x1508 <__divsf3_pse+0x6c>
    1514:	86 95       	lsr	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	b7 95       	ror	r27
    151c:	f7 95       	ror	r31
    151e:	9f 5f       	subi	r25, 0xFF	; 255
    1520:	c9 f7       	brne	.-14     	; 0x1514 <__divsf3_pse+0x78>
    1522:	88 0f       	add	r24, r24
    1524:	91 1d       	adc	r25, r1
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	97 f9       	bld	r25, 7
    152c:	08 95       	ret
    152e:	e1 e0       	ldi	r30, 0x01	; 1
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	bb 1f       	adc	r27, r27
    1538:	62 17       	cp	r22, r18
    153a:	73 07       	cpc	r23, r19
    153c:	84 07       	cpc	r24, r20
    153e:	ba 07       	cpc	r27, r26
    1540:	20 f0       	brcs	.+8      	; 0x154a <__divsf3_pse+0xae>
    1542:	62 1b       	sub	r22, r18
    1544:	73 0b       	sbc	r23, r19
    1546:	84 0b       	sbc	r24, r20
    1548:	ba 0b       	sbc	r27, r26
    154a:	ee 1f       	adc	r30, r30
    154c:	88 f7       	brcc	.-30     	; 0x1530 <__divsf3_pse+0x94>
    154e:	e0 95       	com	r30
    1550:	08 95       	ret

00001552 <__fixunssfsi>:
    1552:	0e 94 45 0b 	call	0x168a	; 0x168a <__fp_splitA>
    1556:	88 f0       	brcs	.+34     	; 0x157a <__fixunssfsi+0x28>
    1558:	9f 57       	subi	r25, 0x7F	; 127
    155a:	98 f0       	brcs	.+38     	; 0x1582 <__fixunssfsi+0x30>
    155c:	b9 2f       	mov	r27, r25
    155e:	99 27       	eor	r25, r25
    1560:	b7 51       	subi	r27, 0x17	; 23
    1562:	b0 f0       	brcs	.+44     	; 0x1590 <__fixunssfsi+0x3e>
    1564:	e1 f0       	breq	.+56     	; 0x159e <__fixunssfsi+0x4c>
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	1a f0       	brmi	.+6      	; 0x1576 <__fixunssfsi+0x24>
    1570:	ba 95       	dec	r27
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__fixunssfsi+0x14>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <__fixunssfsi+0x4c>
    1576:	b1 30       	cpi	r27, 0x01	; 1
    1578:	91 f0       	breq	.+36     	; 0x159e <__fixunssfsi+0x4c>
    157a:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_zero>
    157e:	b1 e0       	ldi	r27, 0x01	; 1
    1580:	08 95       	ret
    1582:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_zero>
    1586:	67 2f       	mov	r22, r23
    1588:	78 2f       	mov	r23, r24
    158a:	88 27       	eor	r24, r24
    158c:	b8 5f       	subi	r27, 0xF8	; 248
    158e:	39 f0       	breq	.+14     	; 0x159e <__fixunssfsi+0x4c>
    1590:	b9 3f       	cpi	r27, 0xF9	; 249
    1592:	cc f3       	brlt	.-14     	; 0x1586 <__fixunssfsi+0x34>
    1594:	86 95       	lsr	r24
    1596:	77 95       	ror	r23
    1598:	67 95       	ror	r22
    159a:	b3 95       	inc	r27
    159c:	d9 f7       	brne	.-10     	; 0x1594 <__fixunssfsi+0x42>
    159e:	3e f4       	brtc	.+14     	; 0x15ae <__fixunssfsi+0x5c>
    15a0:	90 95       	com	r25
    15a2:	80 95       	com	r24
    15a4:	70 95       	com	r23
    15a6:	61 95       	neg	r22
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	8f 4f       	sbci	r24, 0xFF	; 255
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	08 95       	ret

000015b0 <__floatunsisf>:
    15b0:	e8 94       	clt
    15b2:	09 c0       	rjmp	.+18     	; 0x15c6 <__floatsisf+0x12>

000015b4 <__floatsisf>:
    15b4:	97 fb       	bst	r25, 7
    15b6:	3e f4       	brtc	.+14     	; 0x15c6 <__floatsisf+0x12>
    15b8:	90 95       	com	r25
    15ba:	80 95       	com	r24
    15bc:	70 95       	com	r23
    15be:	61 95       	neg	r22
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	8f 4f       	sbci	r24, 0xFF	; 255
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	99 23       	and	r25, r25
    15c8:	a9 f0       	breq	.+42     	; 0x15f4 <__floatsisf+0x40>
    15ca:	f9 2f       	mov	r31, r25
    15cc:	96 e9       	ldi	r25, 0x96	; 150
    15ce:	bb 27       	eor	r27, r27
    15d0:	93 95       	inc	r25
    15d2:	f6 95       	lsr	r31
    15d4:	87 95       	ror	r24
    15d6:	77 95       	ror	r23
    15d8:	67 95       	ror	r22
    15da:	b7 95       	ror	r27
    15dc:	f1 11       	cpse	r31, r1
    15de:	f8 cf       	rjmp	.-16     	; 0x15d0 <__floatsisf+0x1c>
    15e0:	fa f4       	brpl	.+62     	; 0x1620 <__floatsisf+0x6c>
    15e2:	bb 0f       	add	r27, r27
    15e4:	11 f4       	brne	.+4      	; 0x15ea <__floatsisf+0x36>
    15e6:	60 ff       	sbrs	r22, 0
    15e8:	1b c0       	rjmp	.+54     	; 0x1620 <__floatsisf+0x6c>
    15ea:	6f 5f       	subi	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	8f 4f       	sbci	r24, 0xFF	; 255
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	16 c0       	rjmp	.+44     	; 0x1620 <__floatsisf+0x6c>
    15f4:	88 23       	and	r24, r24
    15f6:	11 f0       	breq	.+4      	; 0x15fc <__floatsisf+0x48>
    15f8:	96 e9       	ldi	r25, 0x96	; 150
    15fa:	11 c0       	rjmp	.+34     	; 0x161e <__floatsisf+0x6a>
    15fc:	77 23       	and	r23, r23
    15fe:	21 f0       	breq	.+8      	; 0x1608 <__floatsisf+0x54>
    1600:	9e e8       	ldi	r25, 0x8E	; 142
    1602:	87 2f       	mov	r24, r23
    1604:	76 2f       	mov	r23, r22
    1606:	05 c0       	rjmp	.+10     	; 0x1612 <__floatsisf+0x5e>
    1608:	66 23       	and	r22, r22
    160a:	71 f0       	breq	.+28     	; 0x1628 <__floatsisf+0x74>
    160c:	96 e8       	ldi	r25, 0x86	; 134
    160e:	86 2f       	mov	r24, r22
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	2a f0       	brmi	.+10     	; 0x1620 <__floatsisf+0x6c>
    1616:	9a 95       	dec	r25
    1618:	66 0f       	add	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	da f7       	brpl	.-10     	; 0x1616 <__floatsisf+0x62>
    1620:	88 0f       	add	r24, r24
    1622:	96 95       	lsr	r25
    1624:	87 95       	ror	r24
    1626:	97 f9       	bld	r25, 7
    1628:	08 95       	ret

0000162a <__fp_inf>:
    162a:	97 f9       	bld	r25, 7
    162c:	9f 67       	ori	r25, 0x7F	; 127
    162e:	80 e8       	ldi	r24, 0x80	; 128
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	08 95       	ret

00001636 <__fp_nan>:
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	80 ec       	ldi	r24, 0xC0	; 192
    163a:	08 95       	ret

0000163c <__fp_pscA>:
    163c:	00 24       	eor	r0, r0
    163e:	0a 94       	dec	r0
    1640:	16 16       	cp	r1, r22
    1642:	17 06       	cpc	r1, r23
    1644:	18 06       	cpc	r1, r24
    1646:	09 06       	cpc	r0, r25
    1648:	08 95       	ret

0000164a <__fp_pscB>:
    164a:	00 24       	eor	r0, r0
    164c:	0a 94       	dec	r0
    164e:	12 16       	cp	r1, r18
    1650:	13 06       	cpc	r1, r19
    1652:	14 06       	cpc	r1, r20
    1654:	05 06       	cpc	r0, r21
    1656:	08 95       	ret

00001658 <__fp_round>:
    1658:	09 2e       	mov	r0, r25
    165a:	03 94       	inc	r0
    165c:	00 0c       	add	r0, r0
    165e:	11 f4       	brne	.+4      	; 0x1664 <__fp_round+0xc>
    1660:	88 23       	and	r24, r24
    1662:	52 f0       	brmi	.+20     	; 0x1678 <__fp_round+0x20>
    1664:	bb 0f       	add	r27, r27
    1666:	40 f4       	brcc	.+16     	; 0x1678 <__fp_round+0x20>
    1668:	bf 2b       	or	r27, r31
    166a:	11 f4       	brne	.+4      	; 0x1670 <__fp_round+0x18>
    166c:	60 ff       	sbrs	r22, 0
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <__fp_round+0x20>
    1670:	6f 5f       	subi	r22, 0xFF	; 255
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	8f 4f       	sbci	r24, 0xFF	; 255
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	08 95       	ret

0000167a <__fp_split3>:
    167a:	57 fd       	sbrc	r21, 7
    167c:	90 58       	subi	r25, 0x80	; 128
    167e:	44 0f       	add	r20, r20
    1680:	55 1f       	adc	r21, r21
    1682:	59 f0       	breq	.+22     	; 0x169a <__fp_splitA+0x10>
    1684:	5f 3f       	cpi	r21, 0xFF	; 255
    1686:	71 f0       	breq	.+28     	; 0x16a4 <__fp_splitA+0x1a>
    1688:	47 95       	ror	r20

0000168a <__fp_splitA>:
    168a:	88 0f       	add	r24, r24
    168c:	97 fb       	bst	r25, 7
    168e:	99 1f       	adc	r25, r25
    1690:	61 f0       	breq	.+24     	; 0x16aa <__fp_splitA+0x20>
    1692:	9f 3f       	cpi	r25, 0xFF	; 255
    1694:	79 f0       	breq	.+30     	; 0x16b4 <__fp_splitA+0x2a>
    1696:	87 95       	ror	r24
    1698:	08 95       	ret
    169a:	12 16       	cp	r1, r18
    169c:	13 06       	cpc	r1, r19
    169e:	14 06       	cpc	r1, r20
    16a0:	55 1f       	adc	r21, r21
    16a2:	f2 cf       	rjmp	.-28     	; 0x1688 <__fp_split3+0xe>
    16a4:	46 95       	lsr	r20
    16a6:	f1 df       	rcall	.-30     	; 0x168a <__fp_splitA>
    16a8:	08 c0       	rjmp	.+16     	; 0x16ba <__fp_splitA+0x30>
    16aa:	16 16       	cp	r1, r22
    16ac:	17 06       	cpc	r1, r23
    16ae:	18 06       	cpc	r1, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	f1 cf       	rjmp	.-30     	; 0x1696 <__fp_splitA+0xc>
    16b4:	86 95       	lsr	r24
    16b6:	71 05       	cpc	r23, r1
    16b8:	61 05       	cpc	r22, r1
    16ba:	08 94       	sec
    16bc:	08 95       	ret

000016be <__fp_zero>:
    16be:	e8 94       	clt

000016c0 <__fp_szero>:
    16c0:	bb 27       	eor	r27, r27
    16c2:	66 27       	eor	r22, r22
    16c4:	77 27       	eor	r23, r23
    16c6:	cb 01       	movw	r24, r22
    16c8:	97 f9       	bld	r25, 7
    16ca:	08 95       	ret

000016cc <__divmodsi4>:
    16cc:	05 2e       	mov	r0, r21
    16ce:	97 fb       	bst	r25, 7
    16d0:	1e f4       	brtc	.+6      	; 0x16d8 <__divmodsi4+0xc>
    16d2:	00 94       	com	r0
    16d4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__negsi2>
    16d8:	57 fd       	sbrc	r21, 7
    16da:	07 d0       	rcall	.+14     	; 0x16ea <__divmodsi4_neg2>
    16dc:	0e 94 94 0b 	call	0x1728	; 0x1728 <__udivmodsi4>
    16e0:	07 fc       	sbrc	r0, 7
    16e2:	03 d0       	rcall	.+6      	; 0x16ea <__divmodsi4_neg2>
    16e4:	4e f4       	brtc	.+18     	; 0x16f8 <__divmodsi4_exit>
    16e6:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__negsi2>

000016ea <__divmodsi4_neg2>:
    16ea:	50 95       	com	r21
    16ec:	40 95       	com	r20
    16ee:	30 95       	com	r19
    16f0:	21 95       	neg	r18
    16f2:	3f 4f       	sbci	r19, 0xFF	; 255
    16f4:	4f 4f       	sbci	r20, 0xFF	; 255
    16f6:	5f 4f       	sbci	r21, 0xFF	; 255

000016f8 <__divmodsi4_exit>:
    16f8:	08 95       	ret

000016fa <__negsi2>:
    16fa:	90 95       	com	r25
    16fc:	80 95       	com	r24
    16fe:	70 95       	com	r23
    1700:	61 95       	neg	r22
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	8f 4f       	sbci	r24, 0xFF	; 255
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	08 95       	ret

0000170a <__umulhisi3>:
    170a:	a2 9f       	mul	r26, r18
    170c:	b0 01       	movw	r22, r0
    170e:	b3 9f       	mul	r27, r19
    1710:	c0 01       	movw	r24, r0
    1712:	a3 9f       	mul	r26, r19
    1714:	70 0d       	add	r23, r0
    1716:	81 1d       	adc	r24, r1
    1718:	11 24       	eor	r1, r1
    171a:	91 1d       	adc	r25, r1
    171c:	b2 9f       	mul	r27, r18
    171e:	70 0d       	add	r23, r0
    1720:	81 1d       	adc	r24, r1
    1722:	11 24       	eor	r1, r1
    1724:	91 1d       	adc	r25, r1
    1726:	08 95       	ret

00001728 <__udivmodsi4>:
    1728:	a1 e2       	ldi	r26, 0x21	; 33
    172a:	1a 2e       	mov	r1, r26
    172c:	aa 1b       	sub	r26, r26
    172e:	bb 1b       	sub	r27, r27
    1730:	fd 01       	movw	r30, r26
    1732:	0d c0       	rjmp	.+26     	; 0x174e <__udivmodsi4_ep>

00001734 <__udivmodsi4_loop>:
    1734:	aa 1f       	adc	r26, r26
    1736:	bb 1f       	adc	r27, r27
    1738:	ee 1f       	adc	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	a2 17       	cp	r26, r18
    173e:	b3 07       	cpc	r27, r19
    1740:	e4 07       	cpc	r30, r20
    1742:	f5 07       	cpc	r31, r21
    1744:	20 f0       	brcs	.+8      	; 0x174e <__udivmodsi4_ep>
    1746:	a2 1b       	sub	r26, r18
    1748:	b3 0b       	sbc	r27, r19
    174a:	e4 0b       	sbc	r30, r20
    174c:	f5 0b       	sbc	r31, r21

0000174e <__udivmodsi4_ep>:
    174e:	66 1f       	adc	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	88 1f       	adc	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	1a 94       	dec	r1
    1758:	69 f7       	brne	.-38     	; 0x1734 <__udivmodsi4_loop>
    175a:	60 95       	com	r22
    175c:	70 95       	com	r23
    175e:	80 95       	com	r24
    1760:	90 95       	com	r25
    1762:	9b 01       	movw	r18, r22
    1764:	ac 01       	movw	r20, r24
    1766:	bd 01       	movw	r22, r26
    1768:	cf 01       	movw	r24, r30
    176a:	08 95       	ret

0000176c <_exit>:
    176c:	f8 94       	cli

0000176e <__stop_program>:
    176e:	ff cf       	rjmp	.-2      	; 0x176e <__stop_program>
